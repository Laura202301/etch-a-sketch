body {
  font-family: "Amaranth", Verdana, Geneva, Tahoma, sans-serif;
  background-color: rgb(243, 200, 200);
  text-align: center;
  margin: 0px 200px; 
}

.header {
  padding: 16px;
  color: rgb(250, 108, 132);
  font-size: 50px;
  display: flex;
  justify-content: center;
  align-items: center;
  gap: 10px;
}

.main-container {
  display: flex;
  justify-content: center;
}

img {
  width: 50px;
  height: 50px;
  border-radius: 50%;
  border: 4px ridge rgba(255, 141, 141, 0.281);
  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 
  0 6px 20px 0 rgba(0, 0, 0, 0.19);
  opacity: 0.7; /* Set transparency for mouse-over effects on hover */
  transition: opacity .2s;
  cursor: pointer;
}

img:hover {
  opacity: 1; /* Fully shown on mouse-over */
}

.img-tittle,
.reset-symbol,
.gradient-dot {
  opacity: 1;
  transition: none;
  cursor:default;
}

.grid-selection,
.slide-container,
.picker-square,
.picker-text,
.button-container2,
.button-container3 {
  padding: 10px;
}

.toolbar-container,
.grid-container {
  border-radius: 8px;
  padding: 20px;
  margin: 10px;
  background: rgba(245, 153, 153, 0.534);
  border: 4px ridge rgba(255, 141, 141, 0.281);
  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 
  0 6px 20px 0 rgba(0, 0, 0, 0.19);
}


/*///// DOT BUTTONS  //////*/
.button-container1 {
  display: flex;
  justify-content: center;
  gap: 36px;
  padding: 75px 0px;
}

.dot-text {
  padding: 10px;
}


/*///// BUTTONS  //////*/
.button-container2,
.button-container3 {
  display: flex;
  justify-content: center;
  border-radius: 8px;
  border: 4px ridge rgba(255, 141, 141, 0.281);
  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 
  0 6px 20px 0 rgba(0, 0, 0, 0.19);
  background: rgba(255, 255, 255, 0.288);
  padding: 4px;
  margin: 0px 60px 10px;
  opacity: 0.7;
  transition: opacity .2s;
  cursor: pointer;
}

.button-container2:hover,
.button-container3:hover {
  opacity: 1; 
}

.button-container2 {
 margin-bottom: 20px;
}

.reset-symbol,
.gradient-dot {
  width: 40px;
  height: 40px;
  border: none;
  box-shadow: none;
}


/*///// SLIDER //////*/
.slide-container {
  display: flex;
  align-items: center;
}

.slider {
  appearance: none; /* Override default look */
  width: 225px;
  height: 18px; 
  background: #756666;
  opacity: 0.7;
  transition: opacity .2s;
  border: 4px ridge rgba(255, 141, 141, 0.281);
  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 
  0 6px 20px 0 rgba(0, 0, 0, 0.19);
}

.slider:hover {
  opacity: 1; 
}

/* Text that shows the graduation on the slider */
p {
  background: #756666;
  border: 4px ridge rgba(255, 141, 141, 0.281);
  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 
  0 6px 20px 0 rgba(0, 0, 0, 0.19);
  opacity: 0.7;
  width: 45px; 
  height: 18px;
  font-size: 14px;
  color:rgb(243, 216, 216)
}

/* Slider handle */
.slider::-webkit-slider-thumb {
  appearance: none; 
  width: 25px; 
  height: 25px;
  background: #db6973; 
  cursor: pointer; 
}

/*Note: The ::-webkit-slider-thumb pseudo-element is a vendor-specific selector used to style the appearance of the slider's thumb in webkit-based browsers (such as Chrome). It allows to customize the visual representation of the draggable handle that users interact with when adjusting the slider's value.*/


/*///// COLOR PICKER //////*/
#fav-color {
  width: 290px; 
  height: 30px;
  border: 4px ridge rgba(255, 141, 141, 0.281);
  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 
  0 6px 20px 0 rgba(0, 0, 0, 0.19);
  opacity: 0.7;
  transition: opacity .2s;
  cursor: pointer;
}

#fav-color:hover {
  opacity: 1;
}

/*///// GRID //////*/
.grid-container {
  display: flex;
  flex-wrap: wrap;
  justify-content: flex-start;
  width: 600px;
}

.grid-item {
  flex-basis: calc(100% / var(--grid-size) - 2px);
  padding-top: calc(100% / var(--grid-size) - 2px);
  margin: 1px;
  background-color: #ccc;
}
/*Note on VAR, CALC, Flexbasis y Padding-top at the bottom */

.grid-item:hover {
  background-color: red;
}

.grid-item.red {
  background-color: red;
}


/*///// FOOTER //////*/
.footer {
  font-size: 18px;
  padding: 30px;
  display: flex;
  justify-content:center;
  align-items: center;
  gap: 10px;
}

.icon {
  width: 30px;
  height: 30px;
}

/*NOTA VAR: La función var() se utiliza para acceder a variables CSS personalizadas. Estas variables pueden ser definidas en cualquier parte del código CSS utilizando la sintaxis --nombre-variable: valor. Luego, puedes utilizar la función var() para acceder al valor de la variable en las propiedades CSS.

NOTA CALC:La función calc() en CSS se utiliza para realizar cálculos matemáticos en las propiedades CSS. Permite combinar diferentes unidades de medida y realizar operaciones aritméticas dentro de una expresión.

NOTA: Flex-basis se utiliza para establecer el tamaño inicial del elemento flexible en un contenedor con diseño de flexbox. Padding-top establece el espacio de relleno superior del elemento. En este caso, ambos se están calculando dinámicamente utilizando la función calc().*/